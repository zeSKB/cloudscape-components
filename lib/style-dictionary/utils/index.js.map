{"version":3,"file":"index.js","sourceRoot":"lib/style-dictionary/","sources":["utils/index.ts"],"names":[],"mappings":";;;AAKA,MAAM,gBAAgB,GAAG,CAAC,KAAqC,EAA0C,EAAE;IACzG,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC7B,OAAO;YACL,KAAK,EAAE,KAAK;YACZ,IAAI,EAAE,KAAK;SACZ,CAAC;KACH;IACD,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF,MAAM,kBAAkB,GAAG,CAAC,KAAuC,EAA4C,EAAE;IAC/G,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC7B,OAAO;YACL,WAAW,EAAE,KAAK;YAClB,OAAO,EAAE,KAAK;SACf,CAAC;KACH;IACD,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF,MAAM,iBAAiB,GAAG,CAAC,KAAsC,EAA2C,EAAE;IAC5G,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC7B,OAAO;YACL,OAAO,EAAE,KAAK;YACd,QAAQ,EAAE,KAAK;SAChB,CAAC;KACH;IACD,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEK,MAAM,qBAAqB,GAAG,CACnC,UAA+C,EACD,EAAE;IAChD,OAAO,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;QAClD,MAAM,GAAG,GAAG,IAAiD,CAAC;QAC9D,GAAG,CAAC,GAAG,CAAC,GAAG,gBAAgB,CAAC,UAAU,CAAC,GAAG,CAAE,CAAC,CAAC;QAC9C,OAAO,GAAG,CAAC;IACb,CAAC,EAAE,EAAkD,CAAC,CAAC;AACzD,CAAC,CAAC;AARW,QAAA,qBAAqB,yBAQhC;AAEK,MAAM,uBAAuB,GAAG,CACrC,UAAkD,EACF,EAAE;IAClD,OAAO,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;QAClD,MAAM,GAAG,GAAG,IAAoD,CAAC;QACjE,GAAG,CAAC,GAAG,CAAC,GAAG,kBAAkB,CAAC,UAAU,CAAC,GAAG,CAAE,CAAC,CAAC;QAChD,OAAO,GAAG,CAAC;IACb,CAAC,EAAE,EAAoD,CAAC,CAAC;AAC3D,CAAC,CAAC;AARW,QAAA,uBAAuB,2BAQlC;AAEK,MAAM,sBAAsB,GAAG,CACpC,UAAiD,EACF,EAAE;IACjD,OAAO,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;QAClD,MAAM,GAAG,GAAG,IAAmD,CAAC;QAChE,GAAG,CAAC,GAAG,CAAC,GAAG,iBAAiB,CAAC,UAAU,CAAC,GAAG,CAAE,CAAC,CAAC;QAC/C,OAAO,GAAG,CAAC;IACb,CAAC,EAAE,EAAmD,CAAC,CAAC;AAC1D,CAAC,CAAC;AARW,QAAA,sBAAsB,0BAQjC;AAEK,MAAM,SAAS,GAAG,CAAC,aAA4D,EAAE,KAAa,EAAE,EAAE;IACvG,OAAO,MAAM,CAAC,WAAW,CACvB,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,EAAE,EAAE;QACnD,OAAO,CAAC,KAAK,EAAE,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;IACnE,CAAC,CAAC,CACH,CAAC;AACJ,CAAC,CAAC;AANW,QAAA,SAAS,aAMpB","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { TokenCategory } from '@cloudscape-design/theming-build';\nimport { StyleDictionary } from './interfaces';\n\nconst expandColorEntry = (entry: StyleDictionary.ColorModeEntry): StyleDictionary.ExpandedColorModeEntry => {\n  if (typeof entry === 'string') {\n    return {\n      light: entry,\n      dark: entry,\n    };\n  }\n  return entry;\n};\n\nconst expandDensityEntry = (entry: StyleDictionary.DensityModeEntry): StyleDictionary.ExpandedDensityModeEntry => {\n  if (typeof entry === 'string') {\n    return {\n      comfortable: entry,\n      compact: entry,\n    };\n  }\n  return entry;\n};\n\nconst expandMotionEntry = (entry: StyleDictionary.MotionModeEntry): StyleDictionary.ExpandedMotionModeEntry => {\n  if (typeof entry === 'string') {\n    return {\n      default: entry,\n      disabled: entry,\n    };\n  }\n  return entry;\n};\n\nexport const expandColorDictionary = (\n  dictionary: StyleDictionary.ModeScopeDictionary\n): StyleDictionary.ExpandedColorScopeDictionary => {\n  return Object.keys(dictionary).reduce((acc, _key) => {\n    const key = _key as keyof StyleDictionary.ModeScopeDictionary;\n    acc[key] = expandColorEntry(dictionary[key]!);\n    return acc;\n  }, {} as StyleDictionary.ExpandedColorScopeDictionary);\n};\n\nexport const expandDensityDictionary = (\n  dictionary: StyleDictionary.DensityScopeDictionary\n): StyleDictionary.ExpandedDensityScopeDictionary => {\n  return Object.keys(dictionary).reduce((acc, _key) => {\n    const key = _key as keyof StyleDictionary.DensityScopeDictionary;\n    acc[key] = expandDensityEntry(dictionary[key]!);\n    return acc;\n  }, {} as StyleDictionary.ExpandedDensityScopeDictionary);\n};\n\nexport const expandMotionDictionary = (\n  dictionary: StyleDictionary.MotionScopeDictionary\n): StyleDictionary.ExpandedMotionScopeDictionary => {\n  return Object.keys(dictionary).reduce((acc, _key) => {\n    const key = _key as keyof StyleDictionary.MotionScopeDictionary;\n    acc[key] = expandMotionEntry(dictionary[key]!);\n    return acc;\n  }, {} as StyleDictionary.ExpandedMotionScopeDictionary);\n};\n\nexport const pickState = (tokenCategory: TokenCategory<string, Record<string, string>>, state: string) => {\n  return Object.fromEntries(\n    Object.entries(tokenCategory).map(([token, value]) => {\n      return [token, typeof value === 'object' ? value[state] : value];\n    })\n  );\n};\n"]}