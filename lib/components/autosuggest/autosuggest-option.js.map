{"version":3,"file":"autosuggest-option.js","sourceRoot":"lib/default/","sources":["autosuggest/autosuggest-option.tsx"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\n\nimport OptionComponent from '../internal/components/option';\nimport SelectableItem from '../internal/components/selectable-item';\nimport { BaseComponentProps, getBaseProps } from '../internal/base-component';\nimport { getTestOptionIndexes } from '../internal/components/options-list/utils/test-indexes';\n\nimport styles from './styles.css.js';\nimport { AutosuggestItem } from './interfaces';\nimport { HighlightType } from '../internal/components/options-list/utils/use-highlight-option';\nimport { useInternalI18n } from '../internal/i18n/context';\n\nexport interface AutosuggestOptionProps extends BaseComponentProps {\n  nativeAttributes?: Record<string, any>;\n  highlightText: string;\n  option: AutosuggestItem;\n  highlighted: boolean;\n  highlightType: HighlightType;\n  current: boolean;\n  enteredTextLabel?: (value: string) => string;\n  virtualPosition?: number;\n  padBottom?: boolean;\n  screenReaderContent?: string;\n  ariaSetsize?: number;\n  ariaPosinset?: number;\n}\n\nconst AutosuggestOption = (\n  {\n    nativeAttributes = {},\n    highlightText,\n    option,\n    highlighted,\n    highlightType,\n    current,\n    enteredTextLabel,\n    virtualPosition,\n    padBottom,\n    screenReaderContent,\n    ariaSetsize,\n    ariaPosinset,\n    ...rest\n  }: AutosuggestOptionProps,\n  ref: React.Ref<HTMLDivElement>\n) => {\n  const baseProps = getBaseProps(rest);\n  const i18n = useInternalI18n('autosuggest');\n  const useEntered = 'type' in option && option.type === 'use-entered';\n  const isParent = 'type' in option && option.type === 'parent';\n  const isChild = 'type' in option && option.type === 'child';\n  const { throughIndex, inGroupIndex, groupIndex } = getTestOptionIndexes(option) || {};\n\n  let optionContent;\n  if (useEntered) {\n    optionContent = i18n('enteredTextLabel', enteredTextLabel?.(option.value || ''), format =>\n      format({ value: option.value || '' })\n    );\n    // we don't want fancy generated content for screenreader for the \"Use...\" option,\n    // just the visible text is fine\n    screenReaderContent = undefined;\n  } else if (isParent) {\n    optionContent = option.label;\n  } else {\n    const a11yProperties: AutosuggestOptionProps['nativeAttributes'] = {};\n    if (nativeAttributes['aria-label']) {\n      a11yProperties['aria-label'] = nativeAttributes['aria-label'];\n    }\n\n    optionContent = (\n      <div {...a11yProperties}>\n        <OptionComponent option={option} highlightedOption={highlighted} highlightText={highlightText} />\n      </div>\n    );\n  }\n\n  return (\n    <SelectableItem\n      {...baseProps}\n      className={styles.option}\n      ariaSelected={current}\n      highlighted={highlighted}\n      disabled={option.disabled}\n      hasBackground={useEntered}\n      isParent={isParent}\n      isChild={isChild}\n      virtualPosition={virtualPosition}\n      data-test-index={throughIndex}\n      data-in-group-index={inGroupIndex}\n      data-group-index={groupIndex}\n      ref={ref}\n      padBottom={padBottom}\n      screenReaderContent={screenReaderContent}\n      ariaSetsize={ariaSetsize}\n      ariaPosinset={ariaPosinset}\n      highlightType={highlightType}\n    >\n      {optionContent}\n    </SelectableItem>\n  );\n};\n\nexport default React.memo(React.forwardRef(AutosuggestOption));\n"]}