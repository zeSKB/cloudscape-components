{"version":3,"file":"test-indexes.js","sourceRoot":"lib/default/","sources":["internal/components/options-list/utils/test-indexes.ts"],"names":[],"mappings":"AAUA,MAAM,YAAY,GAAG,IAAI,OAAO,EAAyB,CAAC;AAC1D,8FAA8F;AAC9F,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAqB,IAAO,EAAE,EAAE,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC5F,MAAM,CAAC,MAAM,mBAAmB,GAAG,CACjC,aAA+B,EAC/B,cAA8C,EAC9C,EAAE;IACF,IAAI,YAAY,GAAG,CAAC,CAAC;IACrB,IAAI,UAAU,GAAG,CAAC,CAAC;IACnB,IAAI,YAAY,GAAG,CAAC,CAAC;IACrB,IAAI,YAAY,GAAiB,IAAI,CAAC;IACtC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;QAC3B,IAAI,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,EAAE;YACrB,YAAY,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,YAAY,EAAE,YAAY,EAAE,EAAE,CAAC,CAAC;SAC1D;aAAM,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE;YAChC,MAAM,WAAW,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC;YACzC,IAAI,WAAW,IAAI,WAAW,KAAK,YAAY,EAAE;gBAC/C,YAAY,GAAG,WAAW,CAAC;gBAC3B,YAAY,GAAG,CAAC,CAAC;gBACjB,YAAY,CAAC,GAAG,CAAC,IAAI,EAAE;oBACrB,YAAY,EAAE,YAAY,EAAE;oBAC5B,UAAU,EAAE,EAAE,UAAU;oBACxB,YAAY,EAAE,YAAY,EAAE;iBAC7B,CAAC,CAAC;aACJ;iBAAM;gBACL,YAAY,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,YAAY,EAAE,YAAY,EAAE,EAAE,UAAU,EAAE,YAAY,EAAE,YAAY,EAAE,EAAE,CAAC,CAAC;aACpG;SACF;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\ninterface ListItem {\n  type?: string;\n}\ninterface TestIndexes {\n  throughIndex?: number;\n  groupIndex?: number;\n  inGroupIndex?: number;\n}\nconst testIndexMap = new WeakMap<ListItem, TestIndexes>();\n//retrieves the test indexes of the option for the findOption and findOptionInGroup test-utils\nexport const getTestOptionIndexes = <T extends ListItem>(item: T) => testIndexMap.get(item);\nexport const generateTestIndexes = <T extends ListItem, Group extends object>(\n  filteredItems: ReadonlyArray<T>,\n  getParentGroup: (item: T) => Group | undefined\n) => {\n  let throughIndex = 1;\n  let groupIndex = 0;\n  let inGroupIndex = 1;\n  let currentGroup: Group | null = null;\n  filteredItems.forEach(item => {\n    if (!('type' in item)) {\n      testIndexMap.set(item, { throughIndex: throughIndex++ });\n    } else if (item.type === 'child') {\n      const parentGroup = getParentGroup(item);\n      if (parentGroup && parentGroup !== currentGroup) {\n        currentGroup = parentGroup;\n        inGroupIndex = 1;\n        testIndexMap.set(item, {\n          throughIndex: throughIndex++,\n          groupIndex: ++groupIndex,\n          inGroupIndex: inGroupIndex++,\n        });\n      } else {\n        testIndexMap.set(item, { throughIndex: throughIndex++, groupIndex, inGroupIndex: inGroupIndex++ });\n      }\n    }\n  });\n};\n"]}